/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_sandbox___ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_conditional_logic___ = __webpack_require__(2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp$blocks = wp.blocks,
    registerBlockType = _wp$blocks.registerBlockType,
    BlockDescription = _wp$blocks.BlockDescription;

var el = wp.element.createElement;
var _wp$blocks$InspectorC = wp.blocks.InspectorControls,
    SelectControl = _wp$blocks$InspectorC.SelectControl,
    RadioControl = _wp$blocks$InspectorC.RadioControl,
    TextControl = _wp$blocks$InspectorC.TextControl,
    ToggleControl = _wp$blocks$InspectorC.ToggleControl;

var InspectorControls = wp.blocks.InspectorControls;
var _wp$components = wp.components,
    Button = _wp$components.Button,
    Dashicon = _wp$components.Dashicon,
    IconButton = _wp$components.IconButton,
    PanelBody = _wp$components.PanelBody,
    Placeholder = _wp$components.Placeholder,
    Popover = _wp$components.Popover,
    Spinner = _wp$components.Spinner;

var Component = wp.element.Component;


// import ConditionalLogic from './components/conditional-logic/'


registerBlockType('gravityforms/block', {

	title: 'Gravity Forms',
	icon: function icon() {
		return React.createElement('img', { src: gform.icon, height: '20' });
	},
	category: 'embed',
	supports: {
		customClassName: false,
		className: false
	},
	supportHTML: false,
	attributes: {
		formId: {
			type: 'integer'
		},
		title: {
			type: 'bool',
			default: true
		},
		description: {
			type: 'bool',
			default: true
		},
		ajax: {
			type: 'bool',
			default: false
		},
		conditionalLogic: {
			type: 'object',
			default: {
				enabled: false,
				actionType: 'show',
				logicType: 'all',
				rules: []
			}
		},
		tabindex: {
			type: 'integer'
		},
		formPreview: {
			type: 'bool',
			default: true
		}
	},

	edit: function (_Component) {
		_inherits(edit, _Component);

		function edit() {
			_classCallCheck(this, edit);

			var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

			_this.setFormId = _this.setFormId.bind(_this);
			_this.updateFormPreview = _this.updateFormPreview.bind(_this);

			_this.state = {
				html: '',
				fetching: false
			};

			return _this;
		}

		_createClass(edit, [{
			key: 'componentWillMount',
			value: function componentWillMount() {

				if (this.props.attributes.formId && this.props.attributes.formPreview) {
					this.setState({ fetching: true });
					this.updateFormPreview(this.props.attributes);
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(props) {

				var oldAtts = this.props.attributes,
				    newAtts = props.attributes;

				if (oldAtts.formId === newAtts.formId && oldAtts.title === newAtts.title && oldAtts.description === newAtts.description && oldAtts.formPreview === newAtts.formPreview) {
					return;
				}

				if (!props.attributes.formId) {
					this.setState({ html: '' });
					return;
				}

				this.updateFormPreview(props.attributes);
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {

				this.unmounting = true;
			}
		}, {
			key: 'setFormId',
			value: function setFormId(formId) {

				this.props.setAttributes({ formId: formId });
			}
		}, {
			key: 'updateFormPreview',
			value: function updateFormPreview(attributes) {
				var _this2 = this;

				if (this.state.fetching || !attributes.formPreview) {
					return;
				}

				var formId = attributes.formId,
				    title = attributes.title,
				    description = attributes.description;

				var apiURL = wpApiSettings.root + 'gf/v2/block/preview?formId=' + formId + '&title=' + (title ? title : false) + '&description=' + (description ? description : false);

				this.setState({ fetching: true });

				window.fetch(apiURL).then(function (response) {

					if (_this2.unmounting) {
						return;
					}

					response.json().then(function (obj) {

						if (obj.success) {
							_this2.setState({ html: obj.data.html });
						} else {
							_this2.setState({ html: '<p>' + __('Could not load form.', 'gravityforms') + '</p>' });
						}

						_this2.setState({ fetching: false });
					});
				});
			}
		}, {
			key: 'render',
			value: function render() {
				var _this3 = this;

				var _props$attributes = this.props.attributes,
				    formId = _props$attributes.formId,
				    title = _props$attributes.title,
				    description = _props$attributes.description,
				    ajax = _props$attributes.ajax,
				    tabindex = _props$attributes.tabindex,
				    formPreview = _props$attributes.formPreview,
				    conditionalLogic = _props$attributes.conditionalLogic;
				var _state = this.state,
				    html = _state.html,
				    fetching = _state.fetching;
				var _props = this.props,
				    setAttributes = _props.setAttributes,
				    focus = _props.focus,
				    setFocus = _props.setFocus;


				var toggleTitle = function toggleTitle() {
					return setAttributes({ title: !title });
				};
				var toggleDescription = function toggleDescription() {
					return setAttributes({ description: !description });
				};
				var toggleAjax = function toggleAjax() {
					return setAttributes({ ajax: !ajax });
				};
				var toggleFormPreview = function toggleFormPreview() {
					return setAttributes({ formPreview: !formPreview });
				};
				var toggleConditionalLogic = function toggleConditionalLogic() {
					return setAttributes({ conditionalLogic: { enabled: !conditionalLogic.enabled } });
				};

				var updateTabindex = function updateTabindex(tabindex) {
					return setAttributes({ tabindex: tabindex });
				};
				var updateConditionalLogic = function updateConditionalLogic(logic) {
					var newLogic = Object.assign(conditionalLogic, logic);
					setAttributes({ conditionalLogic: newLogic });
				};

				var setFormIdFromPlaceholder = function setFormIdFromPlaceholder(e) {
					return _this3.setFormId(e.target.value);
				};

				var controls = [focus && React.createElement(
					InspectorControls,
					{ key: 'inspector' },
					React.createElement(
						BlockDescription,
						null,
						React.createElement(
							'p',
							null,
							'Gravity Forms'
						)
					),
					React.createElement(SelectControl, {
						label: __('Form', 'gravityforms'),
						value: formId,
						options: gform.forms,
						onChange: this.setFormId
					}),
					React.createElement(ToggleControl, {
						label: __('Form Title', 'gravityforms'),
						checked: title,
						onChange: toggleTitle
					}),
					React.createElement(ToggleControl, {
						label: __('Form Description', 'gravityforms'),
						checked: description,
						onChange: toggleDescription
					}),
					React.createElement(
						PanelBody,
						{ title: __('Conditional Logic', 'gravityforms'), className: 'gform-block-panel' },
						React.createElement(ToggleControl, {
							label: __('Conditional Logic', 'gravityforms'),
							checked: conditionalLogic.enabled,
							onChange: toggleConditionalLogic
						}),
						conditionalLogic.enabled && React.createElement(__WEBPACK_IMPORTED_MODULE_1__components_conditional_logic___["a" /* default */], { logic: conditionalLogic, onChange: updateConditionalLogic })
					),
					React.createElement(
						PanelBody,
						{ title: __('Advanced Settings', 'gravityforms'), initialOpen: false,
							className: 'gform-block-panel' },
						React.createElement(ToggleControl, {
							label: __('Preview', 'gravityforms'),
							checked: formPreview,
							onChange: toggleFormPreview
						}),
						React.createElement(ToggleControl, {
							label: __('AJAX', 'gravityforms'),
							checked: ajax,
							onChange: toggleAjax
						}),
						React.createElement(TextControl, {
							label: __('Tabindex', 'gravityforms'),
							value: tabindex,
							onChange: updateTabindex,
							placeholder: '-1'
						})
					)
				)];

				if (fetching) {
					return [controls, React.createElement(
						'div',
						{ key: 'loading', className: 'wp-block-embed is-loading' },
						React.createElement(Spinner, null),
						React.createElement(
							'p',
							null,
							__('Loading form preview...', 'gravityforms')
						)
					)];
				}

				if (!html || !formPreview) {

					return [controls, React.createElement(
						Placeholder,
						{ key: 'placeholder', className: 'wp-block-embed gform-block-placeholder' },
						React.createElement(
							'div',
							{ className: 'gform-block-placeholder-brand' },
							React.createElement('img', { src: gform.icon, width: '110' }),
							React.createElement(
								'p',
								null,
								React.createElement(
									'strong',
									null,
									'Gravity Forms'
								)
							)
						),
						React.createElement(
							'form',
							null,
							React.createElement(
								'select',
								{ value: formId, onChange: setFormIdFromPlaceholder },
								gform.forms.map(function (form) {
									return React.createElement(
										'option',
										{ key: form.value, value: form.value },
										form.label
									);
								})
							)
						)
					)];
				}

				return [controls, React.createElement(
					'div',
					{ className: 'wp-block-embed__wrapper' },
					React.createElement(__WEBPACK_IMPORTED_MODULE_0__components_sandbox___["a" /* default */], { html: html, onFocus: function onFocus() {
							return setFocus();
						} })
				)];
			}
		}]);

		return edit;
	}(Component),

	save: function save() {
		return null;
	}

});

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = wp.element.Component;

var Sandbox = function (_Component) {
	_inherits(Sandbox, _Component);

	function Sandbox() {
		_classCallCheck(this, Sandbox);

		var _this = _possibleConstructorReturn(this, (Sandbox.__proto__ || Object.getPrototypeOf(Sandbox)).apply(this, arguments));

		_this.trySandbox = _this.trySandbox.bind(_this);
		_this.checkMessageForResize = _this.checkMessageForResize.bind(_this);
		_this.checkFocus = _this.checkFocus.bind(_this);

		_this.state = {
			width: 0,
			height: 0
		};
		return _this;
	}

	_createClass(Sandbox, [{
		key: 'isFrameAccessible',
		value: function isFrameAccessible() {
			try {
				return !!this.iframe.contentDocument.body;
			} catch (e) {
				return false;
			}
		}
	}, {
		key: 'checkMessageForResize',
		value: function checkMessageForResize(event) {
			var iframe = this.iframe;

			// Attempt to parse the message data as JSON if passed as string
			var data = event.data || {};
			if ('string' === typeof data) {
				try {
					data = JSON.parse(data);
				} catch (e) {} // eslint-disable-line no-empty
			}

			// Verify that the mounted element is the source of the message
			if (!iframe || iframe.contentWindow !== event.source) {
				return;
			}

			// Update the state only if the message is formatted as we expect, i.e.
			// as an object with a 'resize' action, width, and height
			var _data = data,
			    action = _data.action,
			    width = _data.width,
			    height = _data.height;
			var _state = this.state,
			    oldWidth = _state.width,
			    oldHeight = _state.height;


			if ('resize' === action && (oldWidth !== width || oldHeight !== height)) {
				this.setState({ width: width, height: height });
			}
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			window.addEventListener('message', this.checkMessageForResize, false);
			window.addEventListener('blur', this.checkFocus);
			this.trySandbox();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.trySandbox();
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			window.removeEventListener('message', this.checkMessageForResize);
			window.removeEventListener('blur', this.checkFocus);
		}
	}, {
		key: 'checkFocus',
		value: function checkFocus() {
			if (this.props.onFocus && document.activeElement === this.iframe) {
				this.props.onFocus();
			}
		}
	}, {
		key: 'trySandbox',
		value: function trySandbox() {
			if (!this.isFrameAccessible()) {
				return;
			}

			var body = this.iframe.contentDocument.body;
			if (null !== body.getAttribute('data-resizable-iframe-connected')) {
				return;
			}

			// writing the document like this makes it act in the same way as if it was
			// loaded over the network, so DOM creation and mutation, script execution, etc.
			// all work as expected
			this.iframe.contentWindow.document.open();
			this.iframe.contentWindow.document.write(this.props.html);
			this.iframe.contentWindow.document.close();
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			return React.createElement('iframe', {
				ref: function ref(node) {
					return _this2.iframe = node;
				},
				title: this.props.title,
				scrolling: 'no',
				sandbox: 'allow-scripts allow-same-origin allow-presentation',
				onLoad: this.trySandbox,
				width: Math.ceil(this.state.width),
				height: Math.ceil(this.state.height),
				style: { pointerEvents: 'none' } });
		}
	}], [{
		key: 'defaultProps',
		get: function get() {
			return {
				html: '',
				title: ''
			};
		}
	}]);

	return Sandbox;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Sandbox);

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ruleset___ = __webpack_require__(3);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$components = wp.components,
    Button = _wp$components.Button,
    Dashicon = _wp$components.Dashicon,
    IconButton = _wp$components.IconButton,
    Popover = _wp$components.Popover;
var _wp$blocks$InspectorC = wp.blocks.InspectorControls,
    BaseControl = _wp$blocks$InspectorC.BaseControl,
    RadioControl = _wp$blocks$InspectorC.RadioControl;




var LogicControl = function (_Component) {
	_inherits(LogicControl, _Component);

	function LogicControl() {
		_classCallCheck(this, LogicControl);

		var _this = _possibleConstructorReturn(this, (LogicControl.__proto__ || Object.getPrototypeOf(LogicControl)).apply(this, arguments));

		_this.state = {
			visible: {
				actionType: false,
				logicType: false
			}
		};

		return _this;
	}

	_createClass(LogicControl, [{
		key: 'getActionTypes',
		value: function getActionTypes() {

			return [{
				label: __('Show', 'gravityforms'),
				value: 'show'
			}, {
				label: __('Hide', 'gravityforms'),
				value: 'hide'
			}];
		}
	}, {
		key: 'getActionTypeLabel',
		value: function getActionTypeLabel() {
			var actionType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'show';


			var actionTypes = this.getActionTypes();

			var targetAction = actionTypes.filter(function (action) {
				return action.value === actionType;
			});

			return targetAction[0].label;
		}
	}, {
		key: 'getLogicTypes',
		value: function getLogicTypes() {
			return [{
				label: __('all', 'gravityforms'),
				value: 'all'
			}, {
				label: __('any', 'gravityforms'),
				value: 'any'
			}];
		}
	}, {
		key: 'getLogicTypeLabel',
		value: function getLogicTypeLabel() {
			var logicType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';


			var logicTypes = this.getLogicTypes();

			var targetLogic = logicTypes.filter(function (logic) {
				return logic.value === logicType;
			});

			return targetLogic[0].label;
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props$logic = this.props.logic,
			    actionType = _props$logic.actionType,
			    logicType = _props$logic.logicType,
			    rules = _props$logic.rules;


			var actionTypes = this.getActionTypes();
			var logicTypes = this.getLogicTypes();

			var toggleActionType = function toggleActionType() {
				return _this2.setState({ visible: { actionType: !_this2.state.visible.actionType } });
			};
			var toggleLogicType = function toggleLogicType() {
				return _this2.setState({ visible: { logicType: !_this2.state.visible.logicType } });
			};

			var changeActionType = function changeActionType(actionType) {
				return _this2.props.onChange({ actionType: actionType });
			};
			var changeLogicType = function changeLogicType(logicType) {
				return _this2.props.onChange({ logicType: logicType });
			};

			var changeRules = function changeRules(rules) {
				_this2.props.onChange({ rules: rules });
			};

			return React.createElement(
				'div',
				null,
				React.createElement(
					'div',
					{ className: 'gform-block-conditional-type' },
					React.createElement(
						Button,
						{ className: 'button-link', onClick: toggleActionType },
						React.createElement(
							'div',
							null,
							this.getActionTypeLabel(actionType)
						),
						React.createElement(
							Popover,
							{ isOpen: this.state.visible.actionType, onClose: toggleActionType, position: 'bottom',
								className: 'gform-block-conditional-popover' },
							React.createElement(RadioControl, { options: actionTypes, onChange: changeActionType, value: actionType })
						)
					),
					'\xA0form if\xA0',
					React.createElement(
						Button,
						{ className: 'button-link', onClick: toggleLogicType },
						React.createElement(
							'div',
							null,
							this.getLogicTypeLabel(logicType)
						),
						React.createElement(
							Popover,
							{ isOpen: this.state.visible.logicType, onClose: toggleLogicType, position: 'bottom',
								className: 'gform-block-conditional-popover' },
							React.createElement(RadioControl, { options: logicTypes, onChange: changeLogicType, value: logicType })
						)
					),
					'\xA0rules match',
					React.createElement(__WEBPACK_IMPORTED_MODULE_0__ruleset___["a" /* default */], { rules: rules, onChange: changeRules })
				)
			);
		}
	}]);

	return LogicControl;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (LogicControl);

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rule___ = __webpack_require__(4);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;

var Component = wp.element.Component;
var IconButton = wp.components.IconButton;




var Ruleset = function (_Component) {
	_inherits(Ruleset, _Component);

	function Ruleset() {
		_classCallCheck(this, Ruleset);

		var _this = _possibleConstructorReturn(this, (Ruleset.__proto__ || Object.getPrototypeOf(Ruleset)).apply(this, arguments));

		_this.addRule = _this.addRule.bind(_this);
		_this.deleteRule = _this.deleteRule.bind(_this);
		_this.updateRule = _this.updateRule.bind(_this);

		return _this;
	}

	_createClass(Ruleset, [{
		key: 'addRule',
		value: function addRule() {

			var rules = this.getRules(),
			    newRules = rules.push({ key: '', operator: '', value: '' });

			this.setRules(newRules);
		}
	}, {
		key: 'deleteRule',
		value: function deleteRule(index) {

			var rules = this.getRules();
			rules.splice(index, 1);

			this.setRules(rules);
		}
	}, {
		key: 'getRules',
		value: function getRules() {

			return this.props.rules;
		}
	}, {
		key: 'setRules',
		value: function setRules(rules) {

			this.props.onChange(rules);

			this.forceUpdate();
		}
	}, {
		key: 'updateRule',
		value: function updateRule(rule, index) {

			var rules = this.getRules();

			rules[index] = rule;

			this.props.onChange(rules);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var rules = this.props.rules;

			return [rules && rules.map(function (rule, index) {
				return React.createElement(__WEBPACK_IMPORTED_MODULE_0__rule___["a" /* default */], { rule: rule, key: index, index: index,
					updateRule: _this2.updateRule,
					deleteRule: _this2.deleteRule });
			}), React.createElement(IconButton, {
				icon: 'insert',
				label: __('Add Rule'),
				onClick: this.addRule,
				className: 'editor-inserter__toggle' })];
		}
	}]);

	return Ruleset;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Ruleset);

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = wp.element.Component;
var Dashicon = wp.components.Dashicon;

var Rule = function (_Component) {
	_inherits(Rule, _Component);

	function Rule() {
		_classCallCheck(this, Rule);

		return _possibleConstructorReturn(this, (Rule.__proto__ || Object.getPrototypeOf(Rule)).apply(this, arguments));
	}

	_createClass(Rule, [{
		key: "updateKey",
		value: function updateKey(key) {

			var rule = this.props.rule;

			rule.key = key;
			this.props.updateRule(rule, this.props.index);

			this.forceUpdate();
		}
	}, {
		key: "updateOperator",
		value: function updateOperator(operator) {

			var rule = this.props.rule;

			rule.operator = operator;

			this.props.updateRule(rule, this.props.index);

			this.forceUpdate();
		}
	}, {
		key: "updateValue",
		value: function updateValue(value) {

			var rule = this.props.rule;

			rule.value = value;
			this.props.updateRule(rule, this.props.index);

			this.forceUpdate();
		}
	}, {
		key: "getOptions",
		value: function getOptions() {

			return gform.conditionalOptions;
		}
	}, {
		key: "getOperatorsForKey",
		value: function getOperatorsForKey() {
			var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


			var options = gform.conditionalOptions;

			for (var i = 0; i < options.length; i++) {

				if (options[i].key.value !== key && key) {
					continue;
				}

				return options[i].operators;
			}

			return [];
		}
	}, {
		key: "getValuesForKey",
		value: function getValuesForKey() {
			var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


			var options = gform.conditionalOptions;

			for (var i = 0; i < options.length; i++) {

				if (options[i].key.value !== key && key) {
					continue;
				}

				return options[i].value;
			}

			return [];
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props$rule = this.props.rule,
			    key = _props$rule.key,
			    operator = _props$rule.operator,
			    value = _props$rule.value;


			var options = this.getOptions();

			var deleteRule = function deleteRule() {
				return _this2.props.deleteRule(_this2.props.index);
			};

			var updateKey = function updateKey(e) {
				return _this2.updateKey(e.target.value);
			};
			var updateOperator = function updateOperator(e) {
				return _this2.updateOperator(e.target.value);
			};
			var updateValue = function updateValue(e) {
				return _this2.updateValue(e.target.value);
			};

			var keySelect = React.createElement(
				"select",
				{
					className: "gform-block__conditional-rule-key",
					value: key,
					onChange: updateKey },
				options.map(function (option) {
					return React.createElement(
						"option",
						{ key: option.key.value, value: option.key.value },
						option.key.label
					);
				})
			);

			var operatorSelect = React.createElement(
				"select",
				{
					className: "gform-block__conditional-rule-operator",
					value: operator,
					onChange: updateOperator },
				this.getOperatorsForKey(key).map(function (operator) {
					return React.createElement(
						"option",
						{ key: operator, value: operator },
						operator
					);
				})
			);

			var valueSelect = React.createElement(
				"select",
				{
					className: "gform-block__conditional-rule-value",
					value: value,
					onChange: updateValue },
				this.getValuesForKey(key).map(function (value) {

					if (value.choices) {

						var choices = value.choices.map(function (subvalue) {
							return React.createElement(
								"option",
								{ key: subvalue.value, value: subvalue.value },
								subvalue.label
							);
						});

						return React.createElement(
							"optgroup",
							{ label: value.label },
							choices
						);
					} else {

						return React.createElement(
							"option",
							{ key: value.value, value: value.value },
							value.label
						);
					}
				})
			);

			return React.createElement(
				"div",
				{ className: "gform-block__conditional-rule" },
				React.createElement(
					"div",
					{ className: "inputs" },
					keySelect,
					operatorSelect,
					valueSelect
				),
				React.createElement(
					"div",
					{ className: "controls" },
					React.createElement(
						"a",
						{ onClick: deleteRule },
						React.createElement(Dashicon, { icon: "trash" })
					)
				)
			);
		}
	}]);

	return Rule;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Rule);

/***/ })
/******/ ]);
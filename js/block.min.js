/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;

var el = wp.element.createElement;
var _wp$blocks$InspectorC = wp.blocks.InspectorControls,
    SelectControl = _wp$blocks$InspectorC.SelectControl,
    ToggleControl = _wp$blocks$InspectorC.ToggleControl;


registerBlockType('gravityforms/block', {

	title: 'Gravity Forms',
	icon: 'feedback',
	category: 'embed',
	supports: {
		customClassName: false,
		className: false
	},
	attributes: {
		id: {
			type: 'integer'
		},
		title: {
			type: 'bool',
			default: true
		},
		description: {
			type: 'bool',
			default: true
		},
		ajax: {
			type: 'bool',
			default: true
		}
	},

	edit: function edit(props) {

		function onChangeFormPreview(event) {
			props.setAttributes({ id: event.target.value });
		}

		function onChangeForm(id) {
			props.setAttributes({ id: id });
		}

		function onChangeTitle() {
			props.setAttributes({ title: !props.attributes.title });
		}

		function onChangeDescription() {
			props.setAttributes({ description: !props.attributes.description });
		}

		function onChangeAjax() {
			props.setAttributes({ ajax: !props.attributes.ajax });
		}

		var formOptions = [el('option', {
			key: 'none',
			value: ''
		}, __('Select a Form', 'gravityforms'))];

		for (var i = 0; i < gform.forms.length; i++) {
			formOptions.push(el('option', {
				key: gform.forms[i].value,
				value: gform.forms[i].value
			}, gform.forms[i].label));
		}

		return [!!props.focus && el(wp.blocks.InspectorControls, { key: 'inspector' }, el(SelectControl, {
			label: __('Select form', 'gravityforms'),
			value: props.attributes.id,
			options: gform.forms,
			onChange: onChangeForm
		}), el(ToggleControl, {
			label: __('Display form title', 'gravityforms'),
			checked: props.attributes.title,
			onChange: onChangeTitle
		}), el(ToggleControl, {
			label: __('Display form description', 'gravityforms'),
			checked: props.attributes.description,
			onChange: onChangeDescription
		}), el(ToggleControl, {
			label: __('Enable AJAX', 'gravityforms'),
			checked: props.attributes.ajax,
			onChange: onChangeAjax
		})), (!!props.focus || !props.attributes.id) && el(wp.components.Placeholder, {
			key: 'placeholder',
			className: 'wp-block-embed',
			label: __('Select a Form', 'gravityforms')
		}, el('form', {}, el('select', {
			value: props.attributes.id,
			onChange: onChangeFormPreview
		}, formOptions))), !props.focus && props.attributes.id && el('p', {}, 'This is where the form preview will be displayed.')];
	},

	save: function save() {
		return null;
	}

});

/***/ })
/******/ ]);